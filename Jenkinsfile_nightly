#!groovy

properties([
    // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
    //CCD-3539 (Stop running Nightly builds on weekends). Original schedule was 'H 05 * * *'
    //pipelineTriggers([cron('H 07 * * 1-5')])
])

@Library("Infrastructure")

def type = "java"
def product = "ccd"
def component = "definition-store-api"

def secrets = [
    'ccd-${env}': [
        secret('ccd-caseworker-autotest-email', 'CCD_CASEWORKER_AUTOTEST_EMAIL'),
        secret('ccd-caseworker-autotest-password', 'CCD_CASEWORKER_AUTOTEST_PASSWORD'),
        secret('ccd-befta-caseworker-3-pwd', 'CCD_BEFTA_CASEWORKER_3_PWD'),
        secret('ccd-befta-master-caseworker-pwd', 'CCD_BEFTA_MASTER_CASEWORKER_PWD'),

        secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_OAUTH2_CLIENT_SECRET'),
        secret('definition-importer-username', 'DEFINITION_IMPORTER_USERNAME'),
        secret('definition-importer-password', 'DEFINITION_IMPORTER_PASSWORD')
    ],
    's2s-${env}': [
        secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_KEY'),
        secret('microservicekey-ccd-gw', 'BEFTA_S2S_CLIENT_SECRET')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [
        $class: 'AzureKeyVaultSecret',
        secretType: 'Secret',
        name: secretName,
        version: '',
        envVariable: envVar
    ]
}

def vaultOverrides = [
    'preview': 'aat',
    'spreview': 'saat'
]

// Vars needed for AKS functional and smoke tests
env.TEST_URL = "http://ccd-definition-store-api-aat.service.core-compute-aat.internal"
env.BEFTA_S2S_CLIENT_ID = "ccd_gw"
env.CCD_CASEWORKER_AUTOTEST_EMAIL = "auto.test.cnp@gmail.com"
env.BEFTA_RESPONSE_HEADER_CHECK_POLICY="JUST_WARN"
env.CCD_STUB_SERVICE_URI_BASE="ccd-test-stubs-service-aat.service.core-compute-aat.internal"
// BEFTA retry env variables
env.BEFTA_RETRY_MAX_ATTEMPTS = "3"
env.BEFTA_RETRY_STATUS_CODES = "500,502,503,504"
env.BEFTA_RETRY_MAX_DELAY = "1000"

env.BEFTA_RETRY_NON_RETRYABLE_HTTP_METHODS = "PUT,POST"

env.DEFAULT_COLLECTION_ASSERTION_MODE="UNORDERED"
// Prevent Docker hub rate limit errors by ensuring that testcontainers uses images from hmctspublic ACR
env.TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX = "hmctspublic.azurecr.io/imported/"

withNightlyPipeline(type, product, component) {

    stage('Wait for ccd-user-profile-api job') {
        script {
            echo "Waiting for upstream ccd-user-profile-api job to complete..."
            build job: 'HMCTS_a_to_c_Nightly/ccd-user-profile-api/master', wait: true, propagate: false
        }
    }

    // Vars needed for functional and smoke tests run against AKS
    env.OAUTH2_CLIENT_ID = "ccd_gateway"
    env.OAUTH2_REDIRECT_URI = "https://www-ccd.nonprod.platform.hmcts.net/oauth2redirect"
    env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"
    env.S2S_URL = "http://rpe-service-auth-provider-aat.service.aat.platform.hmcts.net"
    env.CCD_GW_SERVICE_NAME = "ccd_gw"

    loadVaultSecrets(secrets)
    enableFortifyScan()
    enableDbMigration('ccd')
    disableLegacyDeployment()
    enableHighLevelDataSetup()

    afterAlways('fortify-scan') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    }

    afterAlways('fortify-scan') {

        stage('Suppress and Send Slack Notification') {

            script {
                if (env.CHANGE_ID) {
                    echo "This is a PR: #${env.CHANGE_ID}"
                    echo "Source branch: ${env.CHANGE_BRANCH}"
                    echo "Target branch: ${env.CHANGE_TARGET}"
                } else {
                    echo "Not a pull request ‚Äî branch: ${env.BRANCH_NAME}"
                }
            }

            def suppressionFile = ''
            script {
                suppressionFile = sh(
                    script: './gradlew printSuppressionFile -q',
                    returnStdout: true
                ).trim().split("=")[1]

                echo "Suppression file and path: ${suppressionFile}"

                sh """
                  echo 'Current contents of ${suppressionFile}:'
                  cat '${suppressionFile}'
                """
            }

            def slackNotificationChannel = '#nightly_cve_suppressions'
            def branch = env.BRANCH_NAME

            if (env.CHANGE_ID) {
                // If this is a PR, push changes to the PR branch
                branch = env.CHANGE_BRANCH
            }

            sh './gradlew suppressCves'

            // Store the list of changed files
            def changedFiles = ''

            // Store the changes in the suppression file
            def changes = ''

            script {
                // Stage all modified tracked files
                sh 'git add -u'

                changedFiles = sh(
                    script: 'git diff --cached --name-only',
                    returnStdout: true
                ).trim().split("\n").findAll { it?.trim() } as List

                echo "List of changed files: ${changedFiles}"

                if (changedFiles.isEmpty()) {
                    echo "No changed files to extract."
                } else {
                    def fileName = sh(
                        script: """
                            echo '${changedFiles}' | tr -d '[]' | xargs basename
                        """,
                        returnStdout: true
                    ).trim()

                    echo "Extracted file name: ${fileName}"
                }

                if (changedFiles.size() == 1 && changedFiles[0] == suppressionFile) {
                    echo "‚úÖ Only suppression file changed. Proceeding..."

                    // Verify it includes CVE-related changes
                    changes = sh(
                        script: """
                          git diff --cached ${suppressionFile} | grep '^+' | grep '<cve>' || true
                        """,
                        returnStdout: true
                    ).trim()

                    if (changes) {
                        echo "‚úÖ CVE-related changes found in suppression file."
                    } else {
                        echo "‚ö†Ô∏è No CVE-related changes detected."
                    }

                } else {
                    echo "‚úÖ Suppression file not changed ‚Äî marking step as successfull"
                }
            }

            if (changes) {

                // Clean and format CVE lines
                def simplifiedChanges = changes
                    .readLines()
                    .collect { it.replaceFirst(/\+/, '').trim() }                // Remove leading '+'
                    .collect { it.replaceAll(/<\/?[^>]+>/, '') }                 // Strip XML/HTML tags
                //.collect { it.replace('[Ticket]', '<https://yourtracker.example/TICKET-ID|Ticket>') } // Optional link
                    .join('\n')

                def message = """
                                üì¶ *CVE Suppression File Updated*

                                *Detected CVE changes (Please create Jira backlog ticket):*

                                ${simplifiedChanges}

                                *Build Info:*
                                ‚Ä¢ *Job*: ${env.JOB_NAME}
                                ‚Ä¢ *Build*: #${env.BUILD_NUMBER}
                                ‚Ä¢ *URL*: ${env.BUILD_URL}
                               """.stripIndent().trim()

                slackSend(
                    channel: slackNotificationChannel,
                    color: '#439FE0',
                    message: message
                )

                echo "Staged files: ${changedFiles}"
                echo "Changes: ${changes}"

                echo "Commiting changes into branch ${branch}"
                sh 'git commit -m "Suppressing CVE - Actions"'
                echo "Pushing changes"

                def credentialsId = env.GIT_CREDENTIALS_ID

                withCredentials([
                    gitUsernamePassword(credentialsId: credentialsId, gitToolName: 'Default')
                ]) {
                    sh """
                        git push origin HEAD:${branch}
                    """
                }
            } else {
                echo "‚úÖ Suppression file not changed ‚Äî skipping Slack notification"
            }
        }
    }

    afterAlways('test') {
        // hmcts/cnp-jenkins-library may fail to copy artifacts after checkstyle error so repeat command (see /src/uk/gov/hmcts/contino/GradleBuilder.groovy)
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/checkstyle/*.html'
    }

    enableFullFunctionalTest(200)

    afterAlways('fullFunctionalTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Functional Tests/**/*'
    }
    enableSlackNotifications('#ccd-nightly-builds')
}
