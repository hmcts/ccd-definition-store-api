server.port=${DEFINITION_STORE_SERVER_PORT:4451}

server.servlet.contextPath=
server.compression.enabled=true
server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain

logging.level.org.springframework.web=INFO
logging.level.uk.gov.hmcts.ccd=INFO
logging.level.org.elasticsearch.client=INFO

spring.datasource.url=jdbc:postgresql://${DEFINITION_STORE_DB_HOST:localhost}:${DEFINITION_STORE_DB_PORT:5000}/${DEFINITION_STORE_DB_NAME:ccd_definition}${DEFINITION_STORE_DB_OPTIONS:}
spring.datasource.username=${DEFINITION_STORE_DB_USERNAME:ccd}
spring.datasource.password=${DEFINITION_STORE_DB_PASSWORD:password}
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.maximum-pool-size=${DEFINITION_STORE_DB_MAX_POOL_SIZE:5}
spring.datasource.hikari.connection-timeout=60000

spring.liquibase.enabled=${ENABLE_DB_MIGRATE:true}
spring.liquibase.change-log=classpath:/db/changelog/db.changelog-master.xml
spring.main.allow-bean-definition-overriding=true
# Jackson ObjectMapper configuration
spring.jackson.serialization.write-dates-as-timestamps=false

spring.jpa.properties.hibernate.ejb.interceptor=uk.gov.hmcts.ccd.definition.store.repository.interceptor.CaseRoleInterceptor
# Disable feature detection to avoid the java.sql.SQLFeatureNotSupportedException
# Method org.postgresql.jdbc.PgConnection.createClob() is not yet implemented.
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
auth.idam.client.baseUrl=${IDAM_USER_URL:http://localhost:4501}
# Both auth-checker-lib and service-auth-provider-client talk to s2s and have different properties for the url
auth.provider.service.client.baseUrl=${IDAM_S2S_URL:http://localhost:4502}
idam.s2s-auth.url=${IDAM_S2S_URL:http://localhost:4502}
idam.s2s-auth.microservice=ccd_definition
idam.s2s-auth.totp_secret=${DEFINITION_STORE_IDAM_KEY:AAAAAAAAAAAAAAAA}

casedefinitionstore.authorised.services=${DEFINITION_STORE_S2S_AUTHORISED_SERVICES:ccd_data,ccd_gw,ccd_admin,jui_webapp}

ccd.user-profile.host=${USER_PROFILE_HOST:http://localhost:4453}

azure.storage.connection-string=${AZURE_STORAGE_CONNECTION_STRING:}
azure.storage.blob-container-reference=${AZURE_STORAGE_BLOB_CONTAINER_REFERENCE:}
azure.storage.definition-upload-enabled=${AZURE_STORAGE_DEFINITION_UPLOAD_ENABLED:false}
azureStorageConfig=enabled

# GENERAL SPRING BOOT ACTUATOR CONFIG
# Context path for Spring Boot Actuator endpoints
management.server.servlet.context-path=/
# server under root instead of /actuator/*
management.endpoints.web.base-path=/
management.endpoints.web.exposure.include=*

# HEALTH ENDPOINT CONFIG
# Enable the health endpoint
management.endpoint.health.enabled=true
management.endpoint.health.show-details=always

# Caching period in milliseconds of health endpoint
management.endpoint.health.cache.time-to-live=1000ms

# Enable default health indicators
management.health.defaults.enabled=true

# Enable database health check
management.health.db.enabled=true

# Enable elastic health check
management.health.elasticsearch.enabled=false

# Enable disk space health check
management.health.diskspace.enabled=true

# METRICS ENDPOINT CONFIG
# Enable the metrics endpoint
management.endpoint.metrics.enabled=true

# Caching period in milliseconds of metrics endpoint
management.endpoint.metrics.cache.time-to-live=1000ms

auth.log.unsuccessful.auth.details=true

spring.application.name=ccd-definition-store
spring.banner.location=classpath:ccd-definition-store-banner.txt

async.executor.core.pool.size=10
async.executor.max.pool.size=10
async.executor.queue.capacity=500
async.executor.prefix=async-exec-

admin-web.authorization.enabled=${ADMIN_WEB_AUTHORIZATION_ENABLED:false}
admin-web.authorization.manageUserProfile[0]=${ADMIN_WEB_AUTHORIZATION_MANAGE_USER_PROFILE_0:ccd-import}
//admin-web.authorization.manageUserProfile[0]=${ADMIN_WEB_AUTHORIZATION_MANAGE_USER_PROFILE_0:ccd-manage-userprofile}
admin-web.authorization.manageUserRole[0]=${ADMIN_WEB_AUTHORIZATION_MANAGE_USER_ROLE_0:ccd-import}
admin-web.authorization.manageDefinition[0]=${ADMIN_WEB_AUTHORIZATION_MANAGE_DEFINITION_0:ccd-import}
admin-web.authorization.importDefinition[0]=${ADMIN_WEB_AUTHORIZATION_IMPORT_DEFINITION_0:ccd-import}


ccd.am.write.to_ccd_only=${CCD_AM_WRITE_TO_CCD_ONLY:AUTOTEST1,TEST}
ccd.am.write.to_am_only=${CCD_AM_WRITE_TO_AM_ONLY:}
ccd.am.write.to_both=${CCD_AM_WRITE_TO_BOTH:}

ccd.am.read.from_ccd=${CCD_AM_READ_FROM_CCD:AUTOTEST1,TEST}
ccd.am.read.from_am=${CCD_AM_READ_FROM_AM:}

