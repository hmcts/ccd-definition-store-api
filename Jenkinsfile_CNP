#!groovy

@Library("Infrastructure")

def type = "java"

def product = "ccd"

def app = "definition-store-api"

def branchesToSync = ['demo', 'ithc', 'perftest']

// Variables to switch pipeline logic and wiring per type of build
def definitionStoreDevelopPr = "PR-575" // This doesn't change frequently, but when it does, only change this value.

def secrets = [
    'ccd-${env}': [
        secret('ccd-caseworker-autotest-email', 'CCD_CASEWORKER_AUTOTEST_EMAIL'),
        secret('ccd-caseworker-autotest-password', 'CCD_CASEWORKER_AUTOTEST_PASSWORD'),
        secret('ccd-befta-caseworker-3-pwd', 'CCD_BEFTA_CASEWORKER_3_PWD'),
        secret('ccd-befta-master-caseworker-pwd', 'CCD_BEFTA_MASTER_CASEWORKER_PWD'),

        secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_OAUTH2_CLIENT_SECRET'),
        secret('definition-importer-username', 'DEFINITION_IMPORTER_USERNAME'),
        secret('definition-importer-password', 'DEFINITION_IMPORTER_PASSWORD'),
        secret('idam-data-store-system-user-username','ROLE_ASSIGNMENT_USER_EMAIL'),
        secret('idam-data-store-system-user-password','ROLE_ASSIGNMENT_USER_PASSWORD')
    ],
    's2s-${env}': [
        secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_KEY'),
        secret('microservicekey-ccd-gw', 'BEFTA_S2S_CLIENT_SECRET')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [
        $class: 'AzureKeyVaultSecret',
        secretType: 'Secret',
        name: secretName,
        version: '',
        envVariable: envVar
    ]
}

def vaultOverrides = [
    'preview': 'aat',
    'spreview': 'saat'
]

// Vars needed for AKS functional and smoke tests
env.BEFTA_S2S_CLIENT_ID = "ccd_gw"
env.CCD_CASEWORKER_AUTOTEST_EMAIL = "auto.test.cnp@gmail.com"
env.BEFTA_RESPONSE_HEADER_CHECK_POLICY="JUST_WARN"
env.CCD_STUB_SERVICE_URI_BASE="ccd-test-stubs-service-aat.service.core-compute-aat.internal"

withPipeline(type, product, app) {
    onMaster {
        enableSlackNotifications('#ccd-master-builds')
    }
    if (env.BRANCH_NAME.equalsIgnoreCase(definitionStoreDevelopPr)) {
        enableSlackNotifications('#ccd-develop-builds')
    }
    onDemo {
        enableSlackNotifications('#ccd-demo-builds')
    }
    onPR {
        enableSlackNotifications('#ccd-pr-builds')
    }

    if (env.BRANCH_NAME.startsWith("PR-")) {
        environmentOfDependencies = env.BRANCH_NAME.toLowerCase()
        env.DEFINITION_STORE_URL_BASE = "https://ccd-definition-store-api-${environmentOfDependencies}.service.core-compute-preview.internal"
    }

    syncBranchesWithMaster(branchesToSync)
    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)
    enableAksStagingDeployment()
    disableLegacyDeploymentOnAAT()
    disableLegacyDeployment()
    enableHighLevelDataSetup()

    after('smoketest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Smoke Tests/**/*'
    }

    before('smoketest:aat') {
        env.DEFINITION_STORE_URL_BASE = "https://ccd-definition-store-api-staging.service.core-compute-aat.internal"
    }

    after('smoketest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Smoke Tests/**/*'
    }

    after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Functional Tests/**/*'
    }

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Functional Tests/**/*'
    }
}
