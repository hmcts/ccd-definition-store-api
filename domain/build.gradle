// Create JAR with test fixtures
apply plugin: 'info.solidsoft.pitest'
task testJar(type: Jar, dependsOn: testClasses) {
    baseName = 'test-' + project.archivesBaseName
    classifier = 'tests'
    from sourceSets.test.output
}

artifacts {
    archives testJar
}

configurations {
    testOutput.extendsFrom (testCompile)
}

jar {
    enabled = true
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
    archiveName = 'definition-store-domain.jar'
}

bootJar {
    enabled = false
}

ext {
    mapstructGenSourceDir = 'build/classes/java/main'
    orgMapstructVersion='1.3.0.Final'
}

dependencies {
    compile project(':app-insights')
    compile (project(':repository')) {
        exclude group: 'org.mapstruct', module: 'mapstruct'
    }
    compile "org.apache.commons:commons-lang3"
    compile group: 'commons-validator', name: 'commons-validator', version: '1.6'
    compile "org.mapstruct:mapstruct-jdk8:${orgMapstructVersion}"
    compileOnly "org.mapstruct:mapstruct-processor:${orgMapstructVersion}"
    testCompile project(":app-insights").sourceSets.main.output
    testCompile project(":repository").sourceSets.test.output

    annotationProcessor "org.mapstruct:mapstruct-processor:${orgMapstructVersion}"
}

idea {
    module {
        sourceDirs += file('${mapstructGenSourceDir}')
        generatedSourceDirs += file('${mapstructGenSourceDir}')
    }
}

pitest {
    targetClasses = ['uk.gov.hmcts.ccd.definition.store.*']
    targetTests = ['uk.gov.hmcts.ccd.definition.store.domain.*',
                   'uk.gov.hmcts.ccd.definition.store.domain.service.*',
                   'uk.gov.hmcts.ccd.definition.store.domain.showcondition.*',
                   'uk.gov.hmcts.ccd.definition.store.domain.validation.*']
    enableDefaultIncrementalAnalysis = true
    historyInputLocation = ['build/reports/pitest/fastermutationtesting']
    historyOutputLocation = ['build/reports/pitest/fastermutationtestingoutput']
    threads = 15
    testSourceSets = [sourceSets.test]
    mainSourceSets = [sourceSets.main]
    fileExtensionsToFilter.addAll('xml', 'json')
    outputFormats = ['XML', 'HTML', 'CSV']
    mutationThreshold = 0
    coverageThreshold = 0
    maxMutationsPerClass = 15
    jvmArgs = ['-Xms1G', '-Xmx3G']
    timestampedReports = false
    failWhenNoMutations = false
    detectInlinedCode = true
}

