buildscript {
    ext {
        springBootVersion = '2.2.5.RELEASE'
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.0.1622"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'application'
    id 'org.owasp.dependencycheck' version '5.1.0'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'se.patrikerdes.use-latest-versions' version '0.2.7'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'org.sonarqube' version '2.7'
    id 'jacoco'
    id 'checkstyle'
    id "com.github.kt3k.coveralls" version "2.8.2"
    id "com.github.spotbugs" version "4.4.4"
    id 'io.franzbecker.gradle-lombok' version '2.0'
    id 'net.ltgt.apt' version '0.21'
    id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.14'
    id "info.solidsoft.pitest" version '1.4.0' apply(false)
    id "org.jetbrains.gradle.plugin.idea-ext" version "0.7"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'net.ltgt.apt-idea'
apply plugin: 'application'
apply plugin: "org.sonarqube"
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'se.patrikerdes.use-latest-versions'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'pmd'
apply from: 'liquibase.gradle'

pmd {
    toolVersion = '6.11.0'
}

mainClassName = 'uk.gov.hmcts.ccd.definition.store.CaseDataAPIApplication'

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'false' ? 11 : 0
    suppressionFile = 'dependency-check-suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
    // Ignore these non-runtime configurations
    skipConfigurations = ['codacy', 'spotbugs', 'checkstyle']
}

//spring boot dependency override
//overriding some default spring boot deps because too old. Not generally recommended but needed to prevent runtime errors with version 6.4.2 of Elastic
ext['elasticsearch.version'] = '6.4.2'
ext['javax-validation.version'] = '2.0.1.Final'
ext['hibernate-validator.version'] = '6.0.10.Final'
//overriding log4j2 default version 2.7 because of vulnerability issues
ext['log4j2.version'] = '2.11.1'
// end

ext {
    junitJupiterVersion = '5.5.2'
    junitVintageVersion = '5.5.2'
    springCloudVersion = 'Hoxton.RELEASE'
    springfoxSwaggerVersion = '2.9.2'
    hamcrestVersion = '1.3'
    powermockVersion = '2.0.0-beta.5'
    reformLogging= '5.1.1-BETA'
    restAssuredVersion = '4.3.0!!'
    groovyVersion = '3.0.2!!'
    tomcatVersion = '9.0.36!!'
    limits = [
            'instruction': 99,
            'branch'     : 99,
            'line'       : 99,
            'complexity' : 89,
            'method'     : 99,
            'class'      : 90
    ]
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// tag::repositories[]
allprojects {
    group 'uk.gov.hmcts.ccd.definition'
    version '1.2.0-SNAPSHOT'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url  "https://dl.bintray.com/hmcts/hmcts-maven"
        }
    }

    apply plugin: 'java'

    ext {
        elasticSearchVersion = '6.4.2'
    }

    dependencies {
        testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
        compile "com.fasterxml.jackson.core:jackson-databind:2.10.0"
        compile  group: 'com.fasterxml.jackson.module', name: 'jackson-module-jaxb-annotations', version: '2.10.3'
    }

    // Global constraints
    dependencies {
        compile "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"    
        compile "org.apache.tomcat.embed:tomcat-embed-el:${tomcatVersion}"
        compile "org.apache.tomcat.embed:tomcat-embed-websocket:${tomcatVersion}"
        testCompile "io.rest-assured:xml-path:${restAssuredVersion}"
        testCompile "io.rest-assured:json-path:${restAssuredVersion}"
        testCompile "org.codehaus.groovy:groovy:${groovyVersion}"
        testCompile "org.codehaus.groovy:groovy-xml:${groovyVersion}"
        testCompile "org.codehaus.groovy:groovy-json:${groovyVersion}"
    }

    checkstyle {
        maxWarnings = 0
        toolVersion = '8.18'
        configDir = new File(rootDir, 'config/checkstyle')
    }

    checkstyleMain.shouldRunAfter(compileJava)
    test.shouldRunAfter(checkstyleTest)

    configurations.all {
        collect { configuration ->
            configuration.exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        }
        resolutionStrategy {
            dependencySubstitution {
                substitute module('org.elasticsearch:elasticsearch') with module("org.elasticsearch:elasticsearch:${elasticSearchVersion}")
            }

            eachDependency { details ->
                if (details.requested.group == 'org.liquibase' && details.requested.name == 'liquibase-core') {
                    details.useVersion '3.6.3'
                }
                if (details.requested.group == 'com.github.ben-manes.caffeine' && details.requested.name == 'caffeine') {
                    details.useVersion '2.7.0'
                }
                if (details.requested.group == 'org.apache.logging.log4j' && details.requested.name == 'log4j-api') {
                    details.useVersion '2.13.2'
                }
            }
        }
    }
}

sourceCompatibility = 11
targetCompatibility = 11


// end::repositories[]

subprojects { subproject ->
    version = project.version

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: "com.github.spotbugs"
    apply plugin: "com.github.kt3k.coveralls"
    apply plugin: 'io.franzbecker.gradle-lombok'


    configurations {
        providedRuntime

        aatCompile.extendsFrom(testCompile)
        aatRuntime.extendsFrom(testRuntime)
        cucumberRuntime.extendsFrom(functionalRuntime)
    }

    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }

    dependencies {
        compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-jaxb-annotations', version: '2.10.3'
        compile group: 'uk.gov.hmcts.reform', name: 'logging', version: reformLogging
        compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: reformLogging
        compile 'uk.gov.hmcts.reform:properties-volume-spring-boot-starter:0.0.4'
        compile 'uk.gov.hmcts.reform:health-spring-boot-starter:0.0.5'

        compile group: 'io.jsonwebtoken', name: 'jjwt', version:'0.9.1'
        compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.1'
        compile group: 'uk.gov.hmcts.reform', name: 'idam-client', version: '1.3.1'

        compile "org.springframework.security:spring-security-web"
        compile "org.springframework.security:spring-security-config"
        compile "org.springframework.boot:spring-boot-starter-oauth2-client"
        compile "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
        compile group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '7.9'
        implementation "io.github.openfeign:feign-httpclient:10.7.0"

        compile('org.springframework.boot:spring-boot-starter-web')
        compile('org.springframework.boot:spring-boot-starter-data-jpa')

        // Force to use the latest org.springframework.security
        compile group: 'org.springframework.security', name: 'spring-security-core', version: '5.3.2.RELEASE'
        compile group: 'org.springframework.security', name: 'spring-security-config', version: '5.3.2.RELEASE'
        compile group: 'org.springframework.security', name: 'spring-security-web', version: '5.3.2.RELEASE'
        compile group: 'org.springframework.security', name: 'spring-security-crypto', version: '5.3.2.RELEASE'

        compile group: 'com.zaxxer', name: 'HikariCP', version: '3.3.1'
        compile group: 'org.jooq', name: 'jool-java-8', version: '0.9.14'
        runtime "org.elasticsearch:elasticsearch:${elasticSearchVersion}"

        compile group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.7.0'
        compile('org.springframework.boot:spring-boot-starter-cache')

        compile group: 'javax.inject', name: 'javax.inject', version: '1'

        compile group: 'com.microsoft.azure', name: 'azure-storage', version: '8.0.0'

        // To avoid compiler warnings about @API annotations in JUnit5 code.
        testCompileOnly 'org.apiguardian:apiguardian-api:1.0.0'

        testCompile group: 'com.opentable.components', name: 'otj-pg-embedded', version: '0.12.0'
        testCompile "org.hamcrest:hamcrest-core:${hamcrestVersion}"
        testCompile "org.hamcrest:hamcrest-library:${hamcrestVersion}"
        testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
        testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
        testRuntime "org.junit.vintage:junit-vintage-engine:${junitVintageVersion}"
        testCompile "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
        testImplementation('org.springframework.boot:spring-boot-starter-test')
        testImplementation('org.springframework.cloud:spring-cloud-starter-contract-stub-runner:2.1.0.RELEASE') {
            exclude group: 'com.github.tomakehurst', module: 'wiremock-standalone'
        }
        testCompile ('com.github.tomakehurst:wiremock-jre8:2.25.1')
        testCompile ('org.springframework.cloud:spring-cloud-contract-wiremock:2.2.1.RELEASE')
        testCompile ("org.mockito:mockito-core:2.24.0") {
            exclude group: 'org.hamcrest'
        }
        testCompile "org.mockito:mockito-all:1.10.19"
        testCompile 'org.mockito:mockito-junit-jupiter:2.24.0'
        testCompile 'com.github.npathai:hamcrest-optional:2.0.0'
        testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
        testCompile 'io.github.openfeign:feign-jackson:10.7.0'
        testCompile 'io.github.openfeign.form:feign-form:3.8.0'
        testCompile group: 'com.fasterxml.jackson.module', name: 'jackson-module-jaxb-annotations', version: '2.10.3'
        testCompile "org.exparity:hamcrest-date:2.0.4"
        testCompile "io.rest-assured:rest-assured:${restAssuredVersion}"
        testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: powermockVersion
        testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: powermockVersion
        testCompile group: 'uk.gov.hmcts', name: 'befta-fw', version: '5.0.0.aca-11.2'
    }

    // from https://github.com/junit-team/junit5/issues/1024
    afterEvaluate {
        jacocoTestReport {
            reports {
                // XML required by coveralls and for the below coverage checks
                // and html are generated by default
                xml.enabled true
                html.enabled true
            }

            classDirectories.setFrom((classDirectories.files.collect {
                fileTree(dir: it, exclude: ['uk/gov/hmcts/ccd/definition/store/hikari/**'])
            }))

            doLast {
                def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
                logger.lifecycle("Checking coverage results: ${report}")

                def parser = new XmlParser()
                parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
                parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
                def results = parser.parse(report)

                def percentage = {
                    def covered = it.'@covered' as Double
                    def missed = it.'@missed' as Double
                    ((covered / (covered + missed)) * 100).round(2)
                }

                def counters = results.counter
                def metrics = [:]
                metrics << [
                        'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
                ]


                def failures = []
                metrics.each {
                    def limit = limits[it.key]
                    if (it.value < limit) {
                        failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
                    }
                }

                if (failures) {
                    logger.quiet("------------------ Code Coverage Failed -----------------------")
                    failures.each {
                        logger.quiet(it)
                    }
                    logger.quiet("---------------------------------------------------------------")
                    throw new GradleException("Code coverage failed")
                } else{
                    logger.quiet("Passed Code Coverage Checks")
                }
            }
        }
    }

    test {
        environment("AZURE_APPLICATIONINSIGHTS_INSTRUMENTATIONKEY", "some-key")
        generateCucumberReports.enabled = false
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed"
        }

        reports {
            html.enabled = true
        }
    }

    check.dependsOn jacocoTestReport

    checkstyle {
        maxWarnings = 999  // In the Ideal world this should be 0
        toolVersion = '8.18'
        configDir = new File(rootDir, 'config/checkstyle')
    }

    tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

// Delete me once there is no more bug
    spotbugs {
        ignoreFailures = true
    }
}
// end::subprojects[]

sonarqube {
    properties {
        property "sonar.junit.reportPaths", 'build/test-results/junit-platform'
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/junitPlatformTest.exec"
        property "sonar.exclusions", "**/entity/*.java,**/model/*.java,**/AbstractDefinitionRepositoryDecorator.java,**/data/*Data.java,**/ControllerExceptionHandler.java,**/GenericLayoutEntityValidatorImpl.java,**/JurisdictionServiceImpl.java,**/AdminWebAuthorizationProperties.java"
        property "sonar.cpd.exclusions", "**/entity/*.java,**/model/*.java"
        property "sonar.jacoco.excludes", "**/entity/*.java,**/model/*.java,**/AbstractDefinitionRepositoryDecorator.java,**/data/*Data.java,**/*Controller.java,**/WorkBasketUserDefaultService.java,**/*Exception.java,**/ControllerExceptionHandler.java,**/GenericLayoutEntityValidatorImpl.java,**/JurisdictionServiceImpl.java"
        property "sonar.coverage.exclusions", "**/entity/*.java,**/model/*.java,**/AbstractDefinitionRepositoryDecorator.java,**/data/*Data.java,**/*Controller.java,**/WorkBasketUserDefaultService.java,**/*Exception.java,**/CaseTypeItem.java,**/ApplicationParams.java,**/CaseTypePresentationControllerService.java,**/DisplayService.java,**/DisplayItemAdapterService.java,**/DisplayApiPresentationControllerService.java,**/ControllerExceptionHandler.java,**/GenericLayoutEntityValidatorImpl.java,**/JurisdictionServiceImpl.java,**/JacksonUtils.java,**/SwaggerConfiguration.java"
        property "sonar.projectName", "ccd-definition-store-api"
        property "sonar.projectKey", "ccd-definition-store-api"
    }
}

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

idea.project.settings {
    compiler {
        javac {
            javacAdditionalOptions "-parameters"
        }
    }
}

idea {
    project {
        ipr {
            withXml { provider ->
                // Get XML as groovy.util.Node to work with.
                def projectXml = provider.asNode()
                // Find compiler configuration component.
                def compilerConfiguration = projectXml.component.find { component ->
                    component.'@name' == 'CompilerConfiguration'
                }
                // Replace current annotationProcessing
                // that is part of the compiler configuration.
                def currentAnnotationProcessing = compilerConfiguration.annotationProcessing
                currentAnnotationProcessing.replaceNode {
                    annotationProcessing {
                        profile(name: 'Default', default: true, enabled: true) {
                            processorPath(useClasspath: true)
                        }
                    }
                }
            }
        }
    }
}

// this allows ./gradlew run
bootJar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
    archiveName = 'case-definition-store-api.jar'
}

// Although there are no sources to compile, Jenkins pipeline needs the jar file to be here
dependencies {
    compile project(':application')
}

task smoke(type: Test, dependsOn: ":aat:smoke")

task functional(type: Test, dependsOn: ":aat:functional")

task codeCoverageReport(type: JacocoReport, dependsOn: allprojects*.test) {

    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    allprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        csv.enabled = false
        html.enabled = true
        html.destination = file("${buildDir}/reports/jacoco/html")
        xml.enabled = true
        xml.destination = file("${buildDir}/reports/jacoco/jacocoTestReport.xml")
    }
}

// for cnp pipeline
task dependencyCheck(dependsOn: dependencyCheckAnalyze)

configurations { codacy }
repositories {
    maven { url "https://jitpack.io" }
    maven { url "http://dl.bintray.com/typesafe/maven-releases" }
}
dependencies {
    codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'
}
task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/jacocoTestReport.xml"
    ]
}

cucumberReports {
    outputDir = file("${rootDir}/target/cucumber")
    reports = files("${rootDir}/target/cucumber.json")
}
