plugins {
    id 'application'
    id 'jacoco'
    id 'idea'
    id 'eclipse'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'org.sonarqube' version '6.0.1.5171'
    id 'com.github.kt3k.coveralls' version "2.12.2"
    id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.25'
    id 'info.solidsoft.pitest' version '1.15.0' apply(false)
    id 'org.jetbrains.gradle.plugin.idea-ext' version "1.1.9"
    id 'uk.gov.hmcts.java' version '0.12.67'
    id 'org.owasp.dependencycheck' version '11.1.1'
}

application {
    mainClass = 'uk.gov.hmcts.ccd.definition.store.CaseDataAPIApplication'
}

apply from: './gradle/suppress.gradle'
dependencyCheck {
    suppressionFile = 'dependency-check-suppressions.xml'
}

tasks.register("printSuppressionFile") {
    doLast {
        println "SUPPRESSION_FILE=${dependencyCheck.suppressionFile}"
    }
}

ext {
    set('elasticsearch.version', '8.16.2')
    set('spring-framework.version', '6.2.1')
    set('spring-security.version', '6.4.2')
    set('springCloudVersion', '2024.0.0')
    set('jackson.version', '2.16.0')
    set('snakeyaml.version', '2.3')
    set('log4j2.version', '2.24.3')

    junitJupiterVersion = '5.11.4'
    junitVintageVersion = '5.11.4'
    springDocVersion = '2.8.11'
    hamcrestVersion = '3.0'
    flywayVersion = '10.20.1'
    reformLogging= '6.1.9'
    apachePoiVersion = '5.4.1'
    appInsightsVersion = '2.6.4'
    restAssuredVersion = '5.5.6'
    groovyVersion = '4.0.28'
    lombokVersion = '1.18.38'
    jjwtVersion = '0.12.7'
    feignJackson = '13.5'
    gsonVersion = '2.13.1'
    elasticSearchVersion = '7.17.29'
    testcontainersVersion = '1.21.3'
    ccdTestDefinitionVersion = '7.27.7-prerelease-CME-537'
    beftaFwVersion = '9.2.4'
    limits = [
            'instruction': 99,
            'branch'     : 99,
            'line'       : 99,
            'complexity' : 89,
            'method'     : 99,
            'class'      : 90
    ]
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// tag::repositories[]
allprojects {
    group 'uk.gov.hmcts.ccd.definition'

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven {
            name = "AzureArtifacts"
            url = uri("https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1")
        }
    }

    configurations {
        mockitoAgent
        codacy
    }

    apply plugin: 'java'

    // Global constraints
    dependencies {

        // start::CVE Vulnerability dependency overrides 

        implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5' // spring-cloud-starter-openfeign
        implementation group: 'commons-io', name: 'commons-io', version: '2.16.1' // spring-cloud-starter-openfeign

        // end::CVE Vulnerability dependency overrides


        // Spring
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
        implementation 'org.springframework.cloud:spring-cloud-starter'

        implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.7'
        implementation group: 'org.hibernate.orm', name: 'hibernate-core', version: '6.6.27.Final'
        implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.4.1'

        implementation group: 'net.minidev', name: 'json-smart', version: '2.4.9'

        // CVE-2021-42550
        implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.18'
        implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.5.18'

        testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

        testImplementation group: 'io.rest-assured', name: 'rest-assured', version: restAssuredVersion
        testImplementation group: 'io.rest-assured', name: 'xml-path', version: restAssuredVersion
        testImplementation group: 'io.rest-assured', name: 'json-path', version: restAssuredVersion
        testImplementation group: 'org.apache.groovy', name: 'groovy', version: groovyVersion
        testImplementation group: 'org.apache.groovy', name: 'groovy-xml', version: groovyVersion
        testImplementation group: 'org.apache.groovy', name: 'groovy-json', version: groovyVersion
        testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.10', classifier: 'all'

    }

}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jacoco {
    toolVersion = "0.8.13"
}


// end::repositories[]

subprojects { subproject ->
    version = project.version

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: "com.github.kt3k.coveralls"
    apply plugin: 'uk.gov.hmcts.java'

    configurations {
        providedRuntime

        cucumberRuntime.extendsFrom(functionalRuntime)
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    tasks.withType(Test).configureEach{
        // Added to handle Powermockito issues
        jvmArgs = jvmArgs + [
                "-javaagent:${configurations.mockitoAgent.asPath}",
                '--add-opens=java.base/java.lang=ALL-UNNAMED',
                '--add-opens=java.base/java.util=ALL-UNNAMED',
                '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED',
                '--add-opens=java.base/sun.security.action=ALL-UNNAMED'
        ]
    }

    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }

    dependencies {

        // start::CVE Vulnerability dependency overrides 

        implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '10.4.2' // spring-boot-starter-oauth2-client
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.17.0' // azure-storage
        implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4' // poi-ooxml



        testImplementation group: 'commons-collections', name: 'commons-collections', version: '3.2.2' // spring-cloud-contract-stub-runner
        testImplementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4' // spring-cloud-contract-stub-runner

        // end::CVE Vulnerability dependency overrides


        // Spring
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
        implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
        implementation group: 'org.springframework.security', name: 'spring-security-web'
        implementation group: 'org.springframework.security', name: 'spring-security-config'

        // HMCTS
        implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.3'
        implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.4'
        implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: reformLogging

        implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.9.3'
        implementation group: 'com.google.code.gson', name: 'gson', version: gsonVersion
        implementation group: 'com.google.guava', name: 'guava', version: '33.3.1-jre'
        implementation group: 'com.microsoft.azure', name: 'applicationinsights-logging-logback', version: appInsightsVersion
        implementation group: 'com.microsoft.azure', name: 'applicationinsights-spring-boot-starter', version: appInsightsVersion
        implementation group: 'com.microsoft.azure', name: 'azure-storage', version: '8.0.0'
        implementation group: 'com.vladmihalcea', name: 'hibernate-types-60', version: '2.21.1'
        implementation group: 'com.zaxxer', name: 'HikariCP', version: '4.0.3'
        implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: feignJackson
        implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: jjwtVersion
        implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: jjwtVersion
        implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: jjwtVersion
        implementation group: 'io.swagger', name: 'swagger-annotations', version: '1.6.16'
        implementation group: 'jakarta.inject', name: 'jakarta.inject-api', version: '2.0.1'
        implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: '3.1.1'
        implementation group: 'org.apache.poi', name: 'poi', version: apachePoiVersion
        implementation group: 'org.apache.poi', name: 'poi-ooxml', version: apachePoiVersion
        implementation group: 'org.apache.poi', name: 'poi-scratchpad', version: apachePoiVersion
        implementation group: 'org.elasticsearch', name: 'elasticsearch', version: elasticSearchVersion
        implementation group: 'org.elasticsearch.client', name: 'elasticsearch-rest-high-level-client', version: elasticSearchVersion
        implementation group: 'org.flywaydb', name: 'flyway-core', version: flywayVersion
        implementation group: 'org.flywaydb', name: 'flyway-database-postgresql', version: flywayVersion
        implementation group: 'org.jooq', name: 'jool-java-8', version: '0.9.15'
        compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

        testImplementation libs.mockito
        mockitoAgent(libs.mockito) {
            transitive = false;
        }

        testCompileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

        testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
        testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap'
        testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner'
        testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '4.1.4'

        // To avoid compiler warnings about @API annotations in JUnit5 code.
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitJupiterVersion
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitJupiterVersion
        testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine', version: junitVintageVersion
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junitJupiterVersion
        testImplementation group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.2'
        testImplementation group: 'org.testcontainers', name: 'postgresql', version: testcontainersVersion
        testImplementation group: 'org.hamcrest', name: 'hamcrest-core', version: hamcrestVersion
        testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: hamcrestVersion

        testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.15.2'
        testImplementation group: 'com.github.npathai', name: 'hamcrest-optional', version: '2.0.0'
        testImplementation group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
        testImplementation group: 'io.github.openfeign', name: 'feign-jackson', version: feignJackson
        testImplementation group: 'io.github.openfeign.form', name: 'feign-form', version: '3.8.0'
        testImplementation group: 'org.exparity', name: 'hamcrest-date', version: '2.0.8'
        testImplementation group: 'com.github.hmcts', name: 'ccd-test-definitions', version: ccdTestDefinitionVersion
        testImplementation group: 'com.github.hmcts', name: 'befta-fw', version: beftaFwVersion
        testImplementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: '1.4.0'
    }

    // from https://github.com/junit-team/junit5/issues/1024'
    afterEvaluate {
        jacocoTestReport {
            reports {
                // XML required by coveralls and for the below coverage checks
                // and html are generated by default
                html.required = true
                html.outputLocation = file("${buildDir}/reports/jacoco/html")

                xml.required = true
                xml.outputLocation = file("${buildDir}/reports/jacoco/jacocoTestReport.xml")

            }

            classDirectories.setFrom((classDirectories.files.collect {
                fileTree(dir: it, exclude: ['uk/gov/hmcts/ccd/definition/store/hikari/**','**/AppInsightsConfiguration**'])
            }))

            doLast {
                def report = file("${buildDir}/reports/jacoco/jacocoTestReport.xml")
                logger.lifecycle("Checking coverage results: ${report}")

                def parser = new XmlParser()
                parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
                parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
                def results = parser.parse(report)

                def percentage = {
                    def covered = it.'@covered' as Double
                    def missed = it.'@missed' as Double
                    ((covered / (covered + missed)) * 100).round(2)
                }

                def counters = results.counter
                def metrics = [:]
                metrics << [
                        'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
                ]


                def failures = []
                metrics.each {
                    def limit = limits[it.key]
                    if (it.value < limit) {
                        failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
                    }
                }

                if (failures) {
                    logger.quiet("------------------ Code Coverage Failed -----------------------")
                    failures.each {
                        logger.quiet(it)
                    }
                    logger.quiet("---------------------------------------------------------------")
                    throw new GradleException("Code coverage failed")
                } else{
                    logger.quiet("Passed Code Coverage Checks")
                }
            }
        }
    }

    test {
       environment("AZURE_APPLICATIONINSIGHTS_INSTRUMENTATIONKEY", "some-key")
        generateCucumberReports.enabled = false
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed"
        }

        reports {
            html.required = true
        }
    }

    check.dependsOn jacocoTestReport
}
// end::subprojects[]

sonarqube {
    properties {
        property "sonar.coverage.exclusions", "**/AppInsightsConfiguration**"
        property "sonar.exclusions", "**/AppInsightsConfiguration**"
        property "sonar.junit.reportPaths", 'build/test-results/junit-platform'
        property "sonar.jacoco.reportPaths", "${buildDir}/jacoco/junitPlatformTest.exec"
        property "sonar.cpd.exclusions", "**/entity/*.java,**/model/*.java"
        property "sonar.jacoco.excludes", "**/AppInsightsConfiguration**,**/entity/*.java,**/model/*.java,**/AbstractDefinitionRepositoryDecorator.java,**/data/*Data.java,**/*Controller.java,**/WorkBasketUserDefaultService.java,**/*Exception.java,**/ControllerExceptionHandler.java,**/GenericLayoutEntityValidatorImpl.java,**/JurisdictionServiceImpl.java,**/ProxyController.java,**/ProxyService.java,**/TestingSupportController.java"
        property "sonar.coverage.exclusions", "**/AppInsightsConfiguration**,**/entity/*.java,**/model/*.java,**/AbstractDefinitionRepositoryDecorator.java,**/data/*Data.java,**/*Controller.java,**/WorkBasketUserDefaultService.java,**/*Exception.java,**/ControllerExceptionHandler.java,**/GenericLayoutEntityValidatorImpl.java,**/JurisdictionServiceImpl.java,**/ProxyController.java,**/ProxyService.java,**/TestingSupportController.java"
        property "sonar.projectName", "ccd-definition-store-api"
        property "sonar.projectKey", "ccd-definition-store-api"
    }
}

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

idea.project.settings {
    compiler {
        javac {
            javacAdditionalOptions "-parameters"
        }
    }
}

idea {
    project {
        ipr {
            withXml { provider ->
                // Get XML as groovy.util.Node to work with.
                def projectXml = provider.asNode()
                // Find compiler configuration component.
                def compilerConfiguration = projectXml.component.find { component ->
                    component.'@name' == 'CompilerConfiguration'
                }
                // Replace current annotationProcessing
                // that is part of the compiler configuration.
                def currentAnnotationProcessing = compilerConfiguration.annotationProcessing
                currentAnnotationProcessing.replaceNode {
                    annotationProcessing {
                        profile(name: 'Default', default: true, enabled: true) {
                            processorPath(useClasspath: true)
                        }
                    }
                }
            }
        }
    }
}

// this allows ./gradlew run
bootJar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
    archiveFileName = 'case-definition-store-api.jar'
}

task smoke(type: Test, dependsOn: ":aat:smoke")

task functional(type: Test, dependsOn: ":aat:functional")

task codeCoverageReport(type: JacocoReport, dependsOn: allprojects*.test) {

    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    allprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        csv.required = false
        html {
            required = true
            outputLocation = file("${buildDir}/reports/jacoco/html")
        }
        xml {
            required = true
            outputLocation = file("${buildDir}/reports/jacoco/jacocoTestReport.xml")
        }
    }
}

// for cnp pipeline
task dependencyCheck(dependsOn: dependencyCheckAnalyze)

dependencies {
    implementation project(':application')
    codacy 'com.github.codacy:codacy-coverage-reporter:6.2.0'
}
task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    mainClass = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/jacocoTestReport.xml"
    ]
}

task fortifyScan(type: JavaExec)  {
    mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

cucumberReports {
    outputDir = file("${rootDir}/target/cucumber")
    reports = files("${rootDir}/target/cucumber.json")
}

task reloadEnvSecrets {
    doFirst {
        def env = project.findProperty('env') ?: 'demo'
        if (project.file("./.${env}-remote-env").exists()) {
            project.file("./.${env}-remote-env").delete()
        }
    }
}

task runRemoteDemo(type: JavaExec) {
    mainClass = 'uk.gov.hmcts.ccd.definition.store.CaseDataAPIApplication'
    classpath = sourceSets.main.runtimeClasspath
    doFirst() {
        configRemoteRunTask(it, 'demo')
    }
}

void configRemoteRunTask(Task execTask, String env) {
    loadEnvSecrets(env)
    project.file("./.${env}-remote-env").readLines().each() {
        def index = it.indexOf("=")
        def key = it.substring(0, index)
        def value = it.substring(index + 1)
        execTask.environment(key, value)
    }
}

void loadEnvSecrets(String env) {
    def azCmd = ['az', 'keyvault', 'secret', 'show', '--vault-name', "ccd-${env}", '-o', 'tsv', '--query', 'value', '--name', 'definition-store-remote-env']
    if (!project.file("./.${env}-remote-env").exists()) {
        new ByteArrayOutputStream().withStream { os ->
            exec {
                if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                    commandLine ['cmd', '/c'] + azCmd
                } else {
                    commandLine azCmd
                }
                standardOutput = os
            }
            project.file("./.${env}-remote-env").write(new String(os.toString().replace('\n', '').decodeBase64(), java.nio.charset.StandardCharsets.UTF_8))
        }
    }
}