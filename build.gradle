buildscript {
    ext {
        springBootVersion = '2.7.12'
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'application'
    id "org.springframework.boot" version '2.1.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'se.patrikerdes.use-latest-versions' version '0.2.7'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'org.sonarqube' version '4.2.0.3129'
    id 'jacoco'
    id 'idea'
    id 'eclipse'
    id 'com.github.kt3k.coveralls' version "2.8.2"
    id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.23'
    id 'info.solidsoft.pitest' version '1.5.1' apply(false)
    id 'org.jetbrains.gradle.plugin.idea-ext' version "0.7"
    id 'uk.gov.hmcts.java' version '0.12.43'
}

mainClassName = 'uk.gov.hmcts.ccd.definition.store.CaseDataAPIApplication'

apply from: './gradle/suppress.gradle'
dependencyCheck {
    suppressionFile = 'dependency-check-suppressions.xml'
}

//spring boot dependency override
//overriding some default spring boot deps because too old. Not generally recommended but needed to prevent runtime errors with version 6.4.2 of Elastic
ext['elasticsearch.version'] = '7.17.1'
ext['javax-validation.version'] = '2.0.1.Final'
ext['hibernate-validator.version'] = '6.0.20.Final'
ext['spring-security.version'] = '5.7.8'
ext['jackson.version'] = '2.15.3'
ext['snakeyaml.version'] = '2.0'
ext['postgresql.version'] = '42.5.1'
//overriding log4j2 default version 2.7 because of vulnerability issues
ext['log4j2.version'] = '2.17.1'

// end

ext {
    junitJupiterVersion = '5.7.0'
    junitVintageVersion = '5.7.0'
    springCloudVersion = '2021.0.3'
    springfoxSwaggerVersion = '3.0.0'
    hamcrestVersion = '1.3'
    powermockVersion = '2.0.9'
    reformLogging= '6.0.1'
    appInsightsVersion = '2.4.1'
    restAssuredVersion = '4.3.0!!'
    groovyVersion = '3.0.17!!'
    tomcatVersion = '9.0.75!!'
    feignJackson = '11.6'
    beftaFwVersion = '8.8.0'
    limits = [
            'instruction': 99,
            'branch'     : 99,
            'line'       : 99,
            'complexity' : 89,
            'method'     : 99,
            'class'      : 90
    ]
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// tag::repositories[]
allprojects {
    group 'uk.gov.hmcts.ccd.definition'

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven {
            url  "https://jitpack.io"
        }
    }

    apply plugin: 'java'

    ext {
        elasticSearchVersion = '7.17.1'
    }

    dependencies {
        testImplementation ("org.springframework.boot:spring-boot-starter-test:${springBootVersion}"){
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        implementation 'net.minidev:json-smart:2.4.7'
    }

    // Global constraints
    dependencies {

        implementation('org.springframework.cloud:spring-cloud-starter-openfeign'){
            version {
                strictly '4.0.3'
            }
        }
        implementation('org.springframework.cloud:spring-cloud-starter'){
            version {
                strictly '3.1.7'
            }
        }

        implementation('org.springframework.security:spring-security-rsa'){
            version {
                strictly '1.0.12.RELEASE'
            }
        }

        implementation('org.bouncycastle:bcprov-jdk18on') {
            version {
                strictly '1.77'
            }
        }

        implementation "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"
        implementation "org.apache.tomcat.embed:tomcat-embed-el:${tomcatVersion}"
        implementation "org.apache.tomcat.embed:tomcat-embed-websocket:${tomcatVersion}"
        implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
        implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
        // Overriding transitive dependency commons-compress due to CVE failures
        implementation "org.apache.commons:commons-compress:1.21"
        // CVE-2021-28170
        implementation "org.glassfish:jakarta.el:4.0.1"

        // CVE-2021-42550
        implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.10'
        implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.10'

        testImplementation "io.rest-assured:xml-path:${restAssuredVersion}"
        testImplementation "io.rest-assured:json-path:${restAssuredVersion}"
        testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"
        testImplementation "org.codehaus.groovy:groovy-xml:${groovyVersion}"
        testImplementation "org.codehaus.groovy:groovy-json:${groovyVersion}"
        testImplementation 'com.github.hmcts:fortify-client:1.3.0:all'
    }

    configurations.all {
        collect { configuration ->
            configuration.exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        }
        resolutionStrategy {
            eachDependency { details ->
                if (details.requested.group == 'com.github.ben-manes.caffeine' && details.requested.name == 'caffeine') {
                    details.useVersion '2.8.5'
                }

                if (details.requested.group == 'com.google.code.gson' && details.requested.name == 'gson') {
                    details.useVersion '2.9.0'
                }

                if (details.requested.group == 'com.nimbusds' && details.requested.name == 'nimbus-jose-jwt') {
                    details.useVersion '9.21'
                }
                if (details.requested.group == 'com.google.guava' && details.requested.name == 'guava') {
                    details.useVersion '32.1.3-jre'
                }
            }
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jacoco {
    toolVersion = "0.8.8"
}


// end::repositories[]

subprojects { subproject ->
    version = project.version

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: "com.github.kt3k.coveralls"
    apply plugin: 'uk.gov.hmcts.java'

    configurations {
        providedRuntime

        aatCompile.extendsFrom(testImplementation)
        aatRuntime.extendsFrom(testRuntimeOnly)
        cucumberRuntime.extendsFrom(functionalRuntime)
    }

    tasks.withType(Test).configureEach{
        // Added to handle Powermockito issues
        jvmArgs = jvmArgs + [
                '--add-opens=java.base/java.lang=ALL-UNNAMED',
                '--add-opens=java.base/java.util=ALL-UNNAMED',
                '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED',
                '--add-opens=java.base/sun.security.action=ALL-UNNAMED'
        ]
    }

    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }

    dependencies {
        implementation group: 'org.apache.poi', name: 'poi', version: '5.2.2'
        implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.2'
        implementation group: 'org.apache.poi', name: 'poi-scratchpad', version: '5.2.2'
        implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
        implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.21'

        implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.0'
        implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: reformLogging
        implementation group: 'com.microsoft.azure', name: 'applicationinsights-logging-logback', version: appInsightsVersion
        implementation group: 'com.microsoft.azure', name: 'applicationinsights-spring-boot-starter', version: appInsightsVersion

        implementation group: 'io.jsonwebtoken', name: 'jjwt', version:'0.9.1'
        implementation (group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '4.0.3') {
            exclude group: 'com.google.guava', module: 'guava'
        }
        implementation (group: 'com.github.hmcts', name: 'idam-java-client', version: '2.0.1') {
            exclude group: 'com.google.guava', module: 'guava'
        }

        compileOnly 'org.projectlombok:lombok:1.18.28'
        annotationProcessor 'org.projectlombok:lombok:1.18.28'

        testCompileOnly 'org.projectlombok:lombok:1.18.28'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'

        implementation "org.springframework.security:spring-security-web"
        implementation "org.springframework.security:spring-security-config"
        implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
        implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"

        implementation "io.github.openfeign:feign-httpclient:${feignJackson}"

        implementation('org.springframework.boot:spring-boot-starter-web')
        implementation('org.springframework.boot:spring-boot-starter-data-jpa')

        implementation group: 'com.zaxxer', name: 'HikariCP', version: '4.0.2'
        implementation group: 'org.jooq', name: 'jool-java-8', version: '0.9.14'
        implementation "org.elasticsearch:elasticsearch:${elasticSearchVersion}"
        implementation "org.elasticsearch.client:elasticsearch-rest-high-level-client:${elasticSearchVersion}"
        implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.7.0'
        implementation('org.springframework.boot:spring-boot-starter-cache')

        implementation 'org.flywaydb:flyway-core:6.5.7'

        implementation group: 'javax.inject', name: 'javax.inject', version: '1'

        implementation (group: 'com.microsoft.azure', name: 'azure-storage', version: '8.0.0') {
            exclude group: 'com.google.guava', module: 'guava'
        }
        implementation group: 'org.bouncycastle', name: 'bcpkix-jdk15to18', version: '1.77'

        // CVE-2021-29425
        implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
        implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '3.1.7'
        implementation "org.springframework.cloud:spring-cloud-starter-bootstrap"
        implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.1.9'

        // To avoid compiler warnings about @API annotations in JUnit5 code.
        testImplementation 'org.apiguardian:apiguardian-api:1.0.0'
        testImplementation "org.postgresql:postgresql:42.5.1"
        testImplementation "org.testcontainers:postgresql:1.17.2"
        testImplementation "org.hamcrest:hamcrest-core:${hamcrestVersion}"
        testImplementation "org.hamcrest:hamcrest-library:${hamcrestVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junitVintageVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
        testImplementation('org.springframework.boot:spring-boot-starter-test')
        testImplementation('org.springframework.cloud:spring-cloud-starter-contract-stub-runner:2.1.0.RELEASE') {
            exclude group: 'com.github.tomakehurst', module: 'wiremock-standalone'
            exclude group: 'commons-beanutils', module: 'commons-beanutils'
        }
        testImplementation ('com.github.tomakehurst:wiremock-jre8:2.25.1')
        testImplementation ('org.springframework.cloud:spring-cloud-contract-wiremock:2.2.1.RELEASE') {
            exclude group: 'commons-beanutils', module: 'commons-beanutils'
        }
        testImplementation ("org.mockito:mockito-core:3.6.0") {
            exclude group: 'org.hamcrest'
        }

        testImplementation "org.mockito:mockito-all:1.10.19"
        testImplementation 'org.mockito:mockito-junit-jupiter:3.6.0'
        testImplementation 'com.github.npathai:hamcrest-optional:2.0.0'
        testImplementation group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
        testImplementation "io.github.openfeign:feign-jackson:${feignJackson}"
        testImplementation 'io.github.openfeign.form:feign-form:3.8.0'
        testImplementation "org.exparity:hamcrest-date:2.0.4"
        testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
        testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: powermockVersion
        testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: powermockVersion

        testImplementation group: 'com.github.hmcts', name: 'ccd-test-definitions', version: '7.19.12'

        implementation group: 'com.github.hmcts', name: 'befta-fw', version: beftaFwVersion

        testImplementation group: 'commons-lang', name: 'commons-lang', version: '2.6'

        // https://mvnrepository.com/artifact/junit/junit
        implementation group: 'junit', name: 'junit', version: '4.13.1'
        testImplementation group: 'junit', name: 'junit', version: '4.13.1'
        testImplementation 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.4.0'
        implementation group: 'com.google.guava', name: 'guava', version: '32.1.3-jre'
        implementation 'javax.validation:validation-api:2.0.1.Final'
        implementation 'io.swagger:swagger-annotations:1.6.6'
        implementation 'com.vladmihalcea:hibernate-types-52:2.16.3'
        implementation group: 'commons-collections', name: 'commons-collections', version: '3.2.2'

    }

    // from https://github.com/junit-team/junit5/issues/1024'
    afterEvaluate {
        jacocoTestReport {
            reports {
                // XML required by coveralls and for the below coverage checks
                // and html are generated by default
                html.required = true
                html.outputLocation = file("${buildDir}/reports/jacoco/html")

                xml.required = true
                xml.outputLocation = file("${buildDir}/reports/jacoco/jacocoTestReport.xml")

            }

            classDirectories.setFrom((classDirectories.files.collect {
                fileTree(dir: it, exclude: ['uk/gov/hmcts/ccd/definition/store/hikari/**','**/AppInsightsConfiguration**'])
            }))

            doLast {
                def report = file("${buildDir}/reports/jacoco/jacocoTestReport.xml")
                logger.lifecycle("Checking coverage results: ${report}")

                def parser = new XmlParser()
                parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
                parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
                def results = parser.parse(report)

                def percentage = {
                    def covered = it.'@covered' as Double
                    def missed = it.'@missed' as Double
                    ((covered / (covered + missed)) * 100).round(2)
                }

                def counters = results.counter
                def metrics = [:]
                metrics << [
                        'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
                ]


                def failures = []
                metrics.each {
                    def limit = limits[it.key]
                    if (it.value < limit) {
                        failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
                    }
                }

                if (failures) {
                    logger.quiet("------------------ Code Coverage Failed -----------------------")
                    failures.each {
                        logger.quiet(it)
                    }
                    logger.quiet("---------------------------------------------------------------")
                    throw new GradleException("Code coverage failed")
                } else{
                    logger.quiet("Passed Code Coverage Checks")
                }
            }
        }
    }

    test {
        environment("AZURE_APPLICATIONINSIGHTS_INSTRUMENTATIONKEY", "some-key")
        generateCucumberReports.enabled = false
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed"
        }

        reports {
            html.required = true
        }
    }

    check.dependsOn jacocoTestReport
}
// end::subprojects[]

sonarqube {
    properties {
        property "sonar.coverage.exclusions", "**/AppInsightsConfiguration**"
        property "sonar.exclusions", "**/AppInsightsConfiguration**"
        property "sonar.junit.reportPaths", 'build/test-results/junit-platform'
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/junitPlatformTest.exec"
        property "sonar.cpd.exclusions", "**/entity/*.java,**/model/*.java"
        property "sonar.jacoco.excludes", "**/AppInsightsConfiguration**,**/entity/*.java,**/model/*.java,**/AbstractDefinitionRepositoryDecorator.java,**/data/*Data.java,**/*Controller.java,**/WorkBasketUserDefaultService.java,**/*Exception.java,**/ControllerExceptionHandler.java,**/GenericLayoutEntityValidatorImpl.java,**/JurisdictionServiceImpl.java,**/ProxyController.java,**/ProxyService.java,**/TestingSupportController.java"
        property "sonar.coverage.exclusions", "**/AppInsightsConfiguration**,**/entity/*.java,**/model/*.java,**/AbstractDefinitionRepositoryDecorator.java,**/data/*Data.java,**/*Controller.java,**/WorkBasketUserDefaultService.java,**/*Exception.java,**/ControllerExceptionHandler.java,**/GenericLayoutEntityValidatorImpl.java,**/JurisdictionServiceImpl.java,**/ProxyController.java,**/ProxyService.java,**/TestingSupportController.java"
        property "sonar.projectName", "ccd-definition-store-api"
        property "sonar.projectKey", "ccd-definition-store-api"
    }
}

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

idea.project.settings {
    compiler {
        javac {
            javacAdditionalOptions "-parameters"
        }
    }
}

idea {
    project {
        ipr {
            withXml { provider ->
                // Get XML as groovy.util.Node to work with.
                def projectXml = provider.asNode()
                // Find compiler configuration component.
                def compilerConfiguration = projectXml.component.find { component ->
                    component.'@name' == 'CompilerConfiguration'
                }
                // Replace current annotationProcessing
                // that is part of the compiler configuration.
                def currentAnnotationProcessing = compilerConfiguration.annotationProcessing
                currentAnnotationProcessing.replaceNode {
                    annotationProcessing {
                        profile(name: 'Default', default: true, enabled: true) {
                            processorPath(useClasspath: true)
                        }
                    }
                }
            }
        }
    }
}

// this allows ./gradlew run
bootJar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
    archiveFileName = 'case-definition-store-api.jar'
}

// Although there are no sources to compile, Jenkins pipeline needs the jar file to be here
dependencies {
    implementation project(':application')
}

task smoke(type: Test, dependsOn: ":aat:smoke")

task functional(type: Test, dependsOn: ":aat:functional")

task codeCoverageReport(type: JacocoReport, dependsOn: allprojects*.test) {

    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    allprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        csv.required = false
        html {
            required = true
            outputLocation = file("${buildDir}/reports/jacoco/html")
        }
        xml {
            required = true
            outputLocation = file("${buildDir}/reports/jacoco/jacocoTestReport.xml")
        }
    }
}

// for cnp pipeline
task dependencyCheck(dependsOn: dependencyCheckAnalyze)

configurations { codacy }

dependencies {
    codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'
}
task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    mainClass = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/jacocoTestReport.xml"
    ]
}

task fortifyScan(type: JavaExec)  {
    mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
    // The line below prevents the build from failing if the Fortify scan detects issues
    ignoreExitValue = true
}

cucumberReports {
    outputDir = file("${rootDir}/target/cucumber")
    reports = files("${rootDir}/target/cucumber.json")
}

task reloadEnvSecrets {
    doFirst {
        def env = project.findProperty('env') ?: 'demo'
        if (project.file("./.${env}-remote-env").exists()) {
            project.file("./.${env}-remote-env").delete()
        }
    }
}

task runRemoteDemo(type: JavaExec) {
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    doFirst() {
        configRemoteRunTask(it, 'demo')
    }
}

void configRemoteRunTask(Task execTask, String env) {
    loadEnvSecrets(env)
    project.file("./.${env}-remote-env").readLines().each() {
        def index = it.indexOf("=")
        def key = it.substring(0, index)
        def value = it.substring(index + 1)
        execTask.environment(key, value)
    }
}

void loadEnvSecrets(String env) {
    def azCmd = ['az', 'keyvault', 'secret', 'show', '--vault-name', "ccd-${env}", '-o', 'tsv', '--query', 'value', '--name', 'definition-store-remote-env']
    if (!project.file("./.${env}-remote-env").exists()) {
        new ByteArrayOutputStream().withStream { os ->
            exec {
                if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                    commandLine ['cmd', '/c'] + azCmd
                } else {
                    commandLine azCmd
                }
                standardOutput = os
            }
            project.file("./.${env}-remote-env").write(new String(os.toString().replace('\n', '').decodeBase64(), java.nio.charset.StandardCharsets.UTF_8))
        }
    }
}
