<!--
Migrate webhooks from event into a new event_webhook table.
There were previously three columns on event containing that event's webhooks.
This takes a relational approach to enable better fetching strategies.
-->
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">
    <changeSet id="rdm-6246.create_webhook_type_enum" author="alex.mcausland@hmcts.net">
        <!--This Enum models the different types of webhook which an event can trigger-->
        <sql>
            create type webhook_type as enum('START', 'PRE_SUBMIT', 'POST_SUBMIT');
        </sql>
        <rollback>drop type webhook_type;</rollback>
    </changeSet>
    <changeSet id="rdm-6246.create_event_webhook_table" author="alex.mcausland@hmcts.net">
        <!--This is a joining table between event and webhook-->
        <sql>
            create table event_webhook(
                id serial unique not null,
                webhook_id integer references webhook(id) not null,
                event_id integer references event(id) not null,
                webhook_type webhook_type not null,
                /* An event can have one webhook per stage */
                primary key(event_id, webhook_type)
            );
        </sql>
        <rollback>drop table event_webhook;</rollback>
    </changeSet>
    <changeSet id="rdm-6246.populate_event_webhook_table" author="alex.mcausland@hmcts.net">
        <!--Populate the newly created table.-->
        <!--For every event we need to insert a row for every start,-->
        <!--presubmit and postsubmit webhook to link the event to its webhook-->
        <sql>
            insert into event_webhook(event_id, webhook_id, webhook_type)
            (
                select id as event_id, webhook_start_id as webhook_id, 'START'::webhook_type
                from event
                where webhook_start_id is not null
                union select id, webhook_pre_submit_id, 'PRE_SUBMIT'
                from event
                where webhook_pre_submit_id is not null
                union select id, webhook_post_submit_id, 'POST_SUBMIT'
                from event
                where webhook_post_submit_id is not null
            );
            <!--
            Prompt Postgres to update its statistics for the table since we have inserted a lot of rows.
            Otherwise Postgres may generate inefficient query plans until the next time its autovacuum daemon runs.
            -->
            analyze event_webhook;
        </sql>
    </changeSet>
</databaseChangeLog>
